---
test case: 'Invalid path $.a[] in {"a":{"b": [{"x":10}, 2, 3] }}'
in:
  json: '{"a":{"b": [{"x":10}, 2, 3] }}'
  path: $.a[]
out:
  result: fail
---
test case: 'Invalid path $a in {"a":1}'
in:
  json: '{"a":1}'
  path: $a
out:
  result: fail
---
test case: 'Invalid path "" in {"a":1}'
in:
  json: '{"a":1}'
  path: ""
out:
  result: fail
---
test case: 'Invalid location $.x.b in {"a":{"b": [{"x":10}, 2, 3] }}'
in:
  json: '{"a":{"b": [{"x":10}, 2, 3] }}'
  path: $.x.b
out:
  result: fail
---
test case: 'Invalid location $[3] in [1, 2, 3]'
in:
  json: '[1, 2, 3]'
  path: $[3]
out:
  result: fail
---
test case: 'Valid location $[0] in [1, 2, 3]'
in:
  json: '[1, 2, 3]'
  path: $[0]
out:
  result: succeed
  value: 1
---
test case: 'Valid location $[1] in [1, 2, 3]'
in:
  json: '[1, 2, 3]'
  path: $[1]
out:
  result: succeed
  value: 2
---
test case: 'Valid location $[2] in [1, 2, 3]'
in:
  json: '[1, 2, 3]'
  path: $[2]
out:
  result: succeed
  value: 3
---
test case: 'Valid location $[1][0] in [1,["a","b","c"],3]'
in:
  json: '[1,["a","b","c"],3]'
  path: $[1][0]
out:
  result: succeed
  value: a
---
test case: 'Valid location $.x[1][2] in {"x":[1, ["a", "b", "c"], 3]}'
in:
  json: '{"x":[1, ["a", "b", "c"], 3]}'
  path: $.x[1][2]
out:
  result: succeed
  value: c
---
test case: 'Valid location $.a in {"a":{"b": [{"x":10}, 2, 3] }}'
in:
  json: '{"a":{"b": [{"x":10}, 2, 3] }}'
  path: $.a
out:
  result: succeed
  value: '{"b": [{"x":10}, 2, 3] }'
---
test case: 'Valid location $.a in {"a" : {"b": [{"x":10}, 2, 3] }}'
in:
  json: '{"a" : {"b": [{"x":10}, 2, 3] }}'
  path: $.a
out:
  result: succeed
  value: '{"b": [{"x":10}, 2, 3] }'
---
test case: 'Valid location $.a.b in {"a":{"b": [{"x":10}, 2, 3] }}'
in:
  json: '{"a":{"b": [{"x":10}, 2, 3] }}'
  path: $.a.b
out:
  result: succeed
  value: '[{"x":10}, 2, 3]'
---
test case: 'Valid location $.a.b[0] in {"a":{"b": [{"x":10}, 2, 3] }}'
in:
  json: '{"a":{"b": [{"x":10}, 2, 3] }}'
  path: $.a.b[0]
out:
  result: succeed
  value: '{"x":10}'
---
test case: 'Valid location $.a.b[1] in {"a":{"b": [{"x":10}, 2, 3] }}'
in:
  json: '{"a":{"b": [{"x":10}, 2, 3] }}'
  path: $.a.b[1]
out:
  result: succeed
  value: 2
---
test case: 'Valid location $.a.b[2] in {"a":{"b": [{"x":10}, 2, 3] }}'
in:
  json: '{"a":{"b": [{"x":10}, 2, 3] }}'
  path: $.a.b[2]
out:
  result: succeed
  value: 3
---
test case: ZBX-13782, escaped Unicode character which translates into 1 byte UTF-8
in:
  json: '{"DeviceLog": "IPv6-Pr\u00e4fix"}'
  path: $.DeviceLog
out:
  result: succeed
  value: "IPv6-Präfix"
---
test case: ZBX-13782, escaped Unicode character which translates into 2 byte UTF-8
in:
  json: '{"DeviceLog": "IPv6-Pr\u00D1fix"}'
  path: $.DeviceLog
out:
  result: succeed
  value: "IPv6-PrÑfix"
---
test case: ZBX-13782, escaped Unicode character which translates into 2 byte UTF-8
in:
  json: '{"DeviceLog": "IPv6-Pr\u042Ffix"}'
  path: $.DeviceLog
out:
  result: succeed
  value: "IPv6-PrЯfix"
---
test case: ZBX-13782, escaped Unicode character which translates into 3 byte UTF-8
in:
  json: '{"DeviceLog": "IPv6-Pr\u0800fix"}'
  path: $.DeviceLog
out:
  result: succeed
  value: "IPv6-Prࠀfix"
---
test case: ZBX-13782, escaped Unicode character which translates into 3 byte UTF-8
in:
  json: '{"DeviceLog": "IPv6-Pr\u10c0fix"}'
  path: $.DeviceLog
out:
  result: succeed
  value: "IPv6-PrჀfix"
---
test case: ZBX-13782, escaped Unicode character which translates into 3 byte UTF-8
in:
  json: '{"DeviceLog": "IPv6-Pr\u10c0fix"}'
  path: $.DeviceLog
out:
  result: succeed
  value: "IPv6-PrჀfix"
---
test case: ZBX-13782, single escaped Unicode character which translates into 3 byte UTF-8
in:
  json: '{"DeviceLog": "\u20E0"}'
  path: $.DeviceLog
out:
  result: succeed
  value: "⃠"
---
test case: ZBX-13782, escaped Unicode character which translates into 3 byte UTF-8
in:
  json: '{"DeviceLog": "-\u20E0-"}'
  path: $.DeviceLog
out:
  result: succeed
  value: "-⃠-"
...
