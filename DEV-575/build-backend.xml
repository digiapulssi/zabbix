<?xml version="1.0" encoding="UTF-8"?>
<project name="Zabbix backend" default="build" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">

	<taskdef resource="net/sf/antcontrib/antlib.xml" />

	<!-- We do not need to set the DBTYPE outside the "build" target -->
	<if>
		<equals arg1="${current_target}" arg2="build"/>
		<then>
			<!-- Initialize database related options based on the database type -->
			<switch value="${DBTYPE}" caseinsensitive="true">
				<case value="MYSQL">
					<property name="with.db" value="--with-mysql"/>
					<property name="with.mysql" value="true"/>
				</case>
				<case value="POSTGRESQL">
					<property name="with.db" value="--with-postgresql"/>
					<property name="with.postgresql" value="true"/>
				</case>
				<default>
					<fail>Unknown database type: ${DBTYPE}</fail>
				</default>
			</switch>	
		</then>
	</if>

	<!-- Static analysis target. Detached from the default -->
	<target name="scan-backend">
		<exec executable="cppcheck" error="${SCANFILE}" failonerror="on">
			<arg line="--enable=all"/>
			<arg line="--inconclusive"/>
			<arg line="--xml"/>
			<arg line="--xml-version=2"/>
			<arg line="."/>
		</exec>
	</target>

	<target name="init">
		<!-- Create database schema -->
		<exec executable="./bootstrap.sh" failonerror="on"></exec>
		<exec executable="./configure" failonerror="on"></exec>
		<exec executable="make" failonerror="on">
			<arg line="-s"/>
			<arg line="-j5"/>
			<arg line="dbschema"/>
		</exec>
	</target>

	<macrodef name="make">
		<!-- Build Zabbix with the specified command line arguments -->
		<attribute name="args"/>
		<attribute name="cc" default="gcc"/>
		<sequential>
			<!-- initialize cflags depending on used compiler -->
			<local name="common.cflags"/>
			<local name="cc.cflags"/>
			<property name="common.cflags" value="-O2 -g"/>
			<switch value="@{cc}">
				<case value="gcc">
					<property name="cc.cflags" value="-Wall -Wextra -Wdeclaration-after-statement -Wpointer-arith -Wno-maybe-uninitialized"/>
				</case>
				<case value="clang">
					<property name="cc.cflags" value=""/>
				</case>
				<default>
					<fail>Unknown compiler type: @{cc}</fail>
				</default>
			</switch>
			
			<!-- clean, configure and build -->
			<exec executable="make" failonerror="on">
				<arg line="-s"/>
				<arg line="-j5"/>
				<arg line="clean"/>
			</exec>
			<exec executable="./configure" failonerror="on">
				<env key="CC" value="@{cc}"/>
				<arg line="@{args}"/>
				<arg line="--prefix=$(pwd)/install"/>
				<arg line="CFLAGS=&quot;${common.cflags} ${cc.cflags}&quot;"/>
			</exec>
			<exec executable="make" failonerror="on">
				<arg line="-s"/>
				<arg line="-j5"/>
			</exec>
		</sequential>
	</macrodef>

	<target name="create-db-mysql">
		<sequential>
			<exec executable="mysql" failonerror="on">
				<arg line="-u${DBUSER}"/>
				<arg line="-p${DBPASSWORD}" if:set="DBPASSWORD"/>
				<arg line="-e &quot;DROP DATABASE IF EXISTS ${DBNAME}&quot;"/>
			</exec>
			<exec executable="mysql" failonerror="on">
				<arg line="-u ${DBUSER}"/>
				<arg line="-p${DBPASSWORD}" if:set="DBPASSWORD"/>
				<arg line="-e &quot;CREATE DATABASE IF NOT EXISTS ${DBNAME}&quot;"/>
			</exec>
			<exec executable="mysql" input="database/mysql/schema.sql" failonerror="on">
				<arg line="-u ${DBUSER}"/>
				<arg line="-p${DBPASSWORD}" if:set="DBPASSWORD"/>
				<arg line="${DBNAME}"/>
			</exec>
			<exec executable="mysql" input="database/mysql/images.sql" failonerror="on">
				<arg line="-u ${DBUSER}"/>
				<arg line="-p${DBPASSWORD}" if:set="DBPASSWORD"/>
				<arg line="${DBNAME}"/>
			</exec>
			<exec executable="mysql" input="database/mysql/data.sql" failonerror="on">
				<arg line="-u ${DBUSER}"/>
				<arg line="-p${DBPASSWORD}" if:set="DBPASSWORD"/>
				<arg line="${DBNAME}"/>
			</exec>
		</sequential>
	</target>

	<target name="create-db-postgresql">
		<sequential>
			<exec executable="psql" failonerror="on">
				<arg line="-U ${DBUSER}"/>
				<arg line="-c &quot;DROP DATABASE IF EXISTS ${DBNAME};&quot;"/>
			</exec>
			<exec executable="psql" failonerror="on">
				<arg line="-U ${DBUSER}"/>
				<arg line="-c &quot;CREATE DATABASE ${DBNAME};&quot;"/>
			</exec>
			<exec executable="psql" failonerror="on">
				<arg line="-U ${DBUSER}"/>
				<arg line="-d ${DBNAME}"/>
				<arg line="-f database/postgresql/schema.sql"/>
			</exec>
			<exec executable="psql" failonerror="on">
				<arg line="-U ${DBUSER}"/>
				<arg line="-d ${DBNAME}"/>
				<arg line="-f database/postgresql/images.sql"/>
			</exec>
			<exec executable="psql" failonerror="on">
				<arg line="-U ${DBUSER}"/>
				<arg line="-d ${DBNAME}"/>
				<arg line="-f database/postgresql/data.sql"/>
			</exec>
		</sequential>
	</target>

	<target name="create-db" depends="create-db-mysql,create-db-postgresql"/>

	<target name="make-gcc">
		<!-- Build Zabbix with various configuration parameters -->
		<sequential>
			<make args="--enable-server ${with.db}"/>
			<make args="--enable-proxy ${with.db}"/>
			<make args="--enable-agent"/>
			<make args="--enable-server --enable-agent --enable-proxy ${with.db}"/>
			<make args="--enable-server --enable-agent --enable-proxy ${with.db} --with-jabber --with-libxml2 --with-unixodbc --with-net-snmp --with-ssh2 --with-openipmi --with-libevent --with-mbedtls --with-ldap  --with-libcurl"/>
			<make args="--enable-server --enable-agent --enable-proxy ${with.db} --with-jabber --with-libxml2 --with-unixodbc --with-net-snmp --with-ssh2 --with-openipmi --with-libevent --with-openssl --with-ldap  --with-libcurl"/>
			<make args="--enable-server --enable-agent --enable-proxy ${with.db} --with-jabber --with-libxml2 --with-unixodbc --with-net-snmp --with-ssh2 --with-openipmi --with-libevent --with-gnutls --with-ldap  --with-libcurl"/>
		</sequential>
	</target>	

	<target name="make-clang">
		<!-- Build Zabbix with clang -->
		<sequential>
			<make cc="clang" args="--enable-server --enable-agent --enable-proxy ${with.db} --with-jabber --with-libxml2 --with-unixodbc --with-net-snmp --with-ssh2 --with-openipmi --with-libevent --with-openssl --with-ldap  --with-libcurl"/>
		</sequential>
	</target>

	<target name="make-db-postgresql" unless="${with.postgresql}">
		<!-- Build Zabbix with postgresql database -->
		<sequential>
			<make cc="clang" args="--enable-server --enable-agent --enable-proxy --with-postgresql --with-jabber --with-libxml2 --with-unixodbc --with-net-snmp --with-ssh2 --with-openipmi --with-libevent --with-openssl --with-ldap  --with-libcurl"/>
		</sequential>
	</target>

	<target name="make-db-mysql" unless="${with.mysql}">
		<!-- Build Zabbix with postgresql database -->
		<sequential>
			<make cc="clang" args="--enable-server --enable-agent --enable-proxy --with-mysql --with-jabber --with-libxml2 --with-unixodbc --with-net-snmp --with-ssh2 --with-openipmi --with-libevent --with-openssl --with-ldap  --with-libcurl"/>
		</sequential>
	</target>

	<!-- Build Zabbix with all supported databases  -->
	<target name="make-db" depends="make-db-mysql,make-db-postgresql"/>

	<target name="build" depends="init,create-db,make-gcc,make-clang,make-db"/>
</project>
